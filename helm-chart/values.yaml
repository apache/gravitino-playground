# Global settings
global:
  storageClass: ""
  namespace: gravitino-playground
  projectRoot: ""

# PostgreSQL settings
postgresql:
  serviceName: &postgres_host_ip postgresql
  image:
    repository: postgres
    tag: "13"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 200Mi
  env:
    - name: POSTGRES_USER
      value: postgres
    - name: POSTGRES_PASSWORD
      value: postgres
    - name: ALLOW_IP_RANGE
      value: 0.0.0.0/0

# MySQL settings
mysql:
  serviceName: &mysql_host_ip mysql
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 200Mi
  env:
    - name: MYSQL_HOST_IP
      value: *mysql_host_ip
    - name: MYSQL_ROOT_PASSWORD
      value: mysql
    - name: MYSQL_USER
      value: mysql
    - name: MYSQL_PASSWORD
      value: mysql
    - name: MYSQL_DATABASE
      value: db

# Hive settings
hive:
  serviceName: &hive_host_ip hive
  image:
    repository: apache/gravitino-playground
    tag: hive-2.7.3
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 3
      memory: 3Gi
    requests:
      cpu: 1
      memory: 1Gi
  env:
    - name: HIVE_HOST_IP
      value: *hive_host_ip
    - name: HADOOP_USER_NAME
      value: &hadoop_user_name root

# Gravitino settings
gravitino:
  serviceName: &gravitino_host_ip gravitino
  image:
    repository: apache/gravitino
    tag: 0.7.0-incubating
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 1.5Gi
    requests:
      cpu: 300m
      memory: 1.5Gi
  env:
    - name: HIVE_HOST_IP
      value: *hive_host_ip
    - name: MYSQL_HOST_IP
      value: *mysql_host_ip

# Trino settings
trino:
  serviceName: &trino_host_ip trino
  image:
    repository: apache/gravitino-playground
    tag: trino-435-gravitino-0.7.0-incubating
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  env:
    - name: HADOOP_USER_NAME
      value: *hadoop_user_name
    - name: GRAVITINO_HOST_IP
      value: *gravitino_host_ip
    - name: GRAVITINO_HOST_PORT
      value: "8090"
    - name: GRAVITINO_METALAKE_NAME
      value: metalake_demo
    - name: HIVE_HOST_IP
      value: *hive_host_ip
    - name: MYSQL_HOST_IP
      value: *mysql_host_ip
    - name: POSTGRES_HOST_IP
      value: *postgres_host_ip

# Spark settings
spark:
  serviceName: &spark_host_ip spark
  image:
    repository: spark
    tag: 3.4.3-scala2.12-java11-python3-r-ubuntu
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 500Mi
  env:
    - name: HADOOP_USER_NAME
      value: *hadoop_user_name
    - name: GRAVITINO_HOST_IP
      value: *gravitino_host_ip
    - name: GRAVITINO_HOST_PORT
      value: "8090"
    - name: HIVE_HOST_IP
      value: *hive_host_ip
    - name: TRINO_HOST_IP
      value: *trino_host_ip

# Jupyter settings
jupyter:
  # service can not be set to jupyter, because we will get this error in jupyter container:
  # ValueError: invalid literal for int() with base 10: 'tcp://192.168.194.169:8888'
  serviceName: jupyternotebook
  image:
    repository: jupyter/pyspark-notebook
    tag: spark-3.4.1
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 200Mi
  env:
    - name: GRAVITINO_HOST_IP
      value: *gravitino_host_ip
    - name: HIVE_HOST_IP
      value: *hive_host_ip
    - name: TRINO_HOST_IP
      value: *trino_host_ip
    - name: POSTGRES_HOST_IP
      value: *postgres_host_ip
    - name: SPARK_HOST_IP
      value: *spark_host_ip

# Service specific settings
service:
  type: ClusterIP
  # If you want to expose services externally, you can use LoadBalancer
  # type: LoadBalancer

# Ingress settings
ingress:
  enabled: false
  # If you want to use ingress, uncomment and adjust the following:
  # annotations: {}
  # hosts:
  #   - host: chart-example.local
  #     paths: []
  # tls: []

# Security settings
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
